{"name": "test_availability_of_page_elements[chrome]", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'", "trace": "self = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:891: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'lbl_page_heading'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:883: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_sign_in.Test_UserSignIn object at 0x04596628>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story(\"Cloud Login Test\")\n    def test_availability_of_page_elements(self):\n        self.login_page = Login(self.driver)\n>       assert self.login_page.check_if_element_exists(\"lbl_page_heading\"), \"Page heading is not available\"\n\ntest_cases\\test_user_sign_in.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\umajin_cloud_base_page.py:119: in check_if_element_exists\n    self.driver.find_element_by_xpath(xpath=config_reader.read(section=CONFIG_FILE_SECTION, key=locator))\nutilities\\config_reader.py:15: in read\n    return config.get(section=section, option=key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:792: NoOptionError"}, "attachments": [{"name": "log", "source": "fabec433-29a9-4a95-86a1-f8b40b021562-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b10e2b57-d9ce-45bb-a091-42d5d9f0a702-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}], "start": 1622283875993, "stop": 1622283875994, "uuid": "f8812cb3-2cb5-4b8e-8e4f-3d8f49632c9d", "historyId": "e0e3aff5653fecaa97e74cb53d1deb1c", "testCaseId": "4413c51104c086c48038211eaafc188a", "fullName": "test_cases.test_user_sign_in.Test_UserSignIn#test_availability_of_page_elements", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Cloud Login Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('add_logs_on_failure', 'get_browser')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_user_sign_in"}, {"name": "subSuite", "value": "Test_UserSignIn"}, {"name": "host", "value": "DESKTOP-57RCRK3"}, {"name": "thread", "value": "4672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_user_sign_in"}]}