{
  "uid" : "72de85c2718ef6d8",
  "name" : "test_availability_of_page_elements[chrome]",
  "fullName" : "test_cases.test_user_sign_in.Test_UserSignIn#test_availability_of_page_elements",
  "historyId" : "e0e3aff5653fecaa97e74cb53d1deb1c",
  "time" : {
    "start" : 1622283875993,
    "stop" : 1622283875994,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'",
  "statusTrace" : "self = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:891: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'lbl_page_heading'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:883: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_sign_in.Test_UserSignIn object at 0x04596628>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story(\"Cloud Login Test\")\n    def test_availability_of_page_elements(self):\n        self.login_page = Login(self.driver)\n>       assert self.login_page.check_if_element_exists(\"lbl_page_heading\"), \"Page heading is not available\"\n\ntest_cases\\test_user_sign_in.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\umajin_cloud_base_page.py:119: in check_if_element_exists\n    self.driver.find_element_by_xpath(xpath=config_reader.read(section=CONFIG_FILE_SECTION, key=locator))\nutilities\\config_reader.py:15: in read\n    return config.get(section=section, option=key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:792: NoOptionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_browser",
    "time" : {
      "start" : 1622283873055,
      "stop" : 1622283875991,
      "duration" : 2936
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "add_logs_on_failure",
    "time" : {
      "start" : 1622283875991,
      "stop" : 1622283875991,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'",
    "statusTrace" : "self = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:891: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'lbl_login_page_heading': \"//div[@id='lg_co_label']\", 'lbl_username': \"//label[@for='name']\", 'txt_usern...[1]', 'btn_profile': \"//a[@class='nav-link navbar-avatar']\", 'lst_project_list': '//tbody/tr[1]/td[1]/div[1]/div'}, {})\nkey = 'lbl_page_heading'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'lbl_page_heading'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\collections\\__init__.py:883: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_sign_in.Test_UserSignIn object at 0x04596628>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story(\"Cloud Login Test\")\n    def test_availability_of_page_elements(self):\n        self.login_page = Login(self.driver)\n>       assert self.login_page.check_if_element_exists(\"lbl_page_heading\"), \"Page heading is not available\"\n\ntest_cases\\test_user_sign_in.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\umajin_cloud_base_page.py:119: in check_if_element_exists\n    self.driver.find_element_by_xpath(xpath=config_reader.read(section=CONFIG_FILE_SECTION, key=locator))\nutilities\\config_reader.py:15: in read\n    return config.get(section=section, option=key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x045D4358>, section = 'locators'\noption = 'lbl_page_heading'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'lbl_page_heading' in section: 'locators'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\configparser.py:792: NoOptionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be49d93fb71884ce",
      "name" : "log",
      "source" : "be49d93fb71884ce.txt",
      "type" : "text/plain",
      "size" : 463
    }, {
      "uid" : "59b9cc67797202d7",
      "name" : "stderr",
      "source" : "59b9cc67797202d7.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "get_browser::0",
    "time" : {
      "start" : 1622283902191,
      "stop" : 1622283904471,
      "duration" : 2280
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "add_logs_on_failure::0",
    "time" : {
      "start" : 1622283876534,
      "stop" : 1622283876636,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6207dba6ccc6592d",
      "name" : "dologin",
      "source" : "6207dba6ccc6592d.png",
      "type" : "image/png",
      "size" : 12837
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 1
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "Cloud Login Test"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('add_logs_on_failure', 'get_browser')"
  }, {
    "name" : "parentSuite",
    "value" : "test_cases"
  }, {
    "name" : "suite",
    "value" : "test_user_sign_in"
  }, {
    "name" : "subSuite",
    "value" : "Test_UserSignIn"
  }, {
    "name" : "host",
    "value" : "DESKTOP-57RCRK3"
  }, {
    "name" : "thread",
    "value" : "4672-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cases.test_user_sign_in"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "get_browser",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('add_logs_on_failure', 'get_browser')" ]
  },
  "source" : "72de85c2718ef6d8.json",
  "parameterValues" : [ "'chrome'" ]
}